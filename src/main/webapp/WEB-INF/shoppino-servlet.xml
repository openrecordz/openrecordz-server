<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:lang="http://www.springframework.org/schema/lang"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/mvc
 		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
 		http://www.springframework.org/schema/lang
        http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    
    

	<!--
		the application context definition for the springapp DispatcherServlet
	-->

	<import resource="classpath:/configuration.xml" />
	<!-- <import resource="classpath:/applicationContext-security.xml" /> -->
	
	<!-- queue -->
	<!-- 	sta qui perche se inserito in context.xml ci sono problemi di hornetq con le classi di test -->
  	<import resource="classpath:/shoppino-queue-configuration.xml"/>
  	<import resource="classpath:/shoppino-accesslog-configuration.xml"/>
	<!-- <import resource="classpath:/applicationContext-security.xml" /> -->
	
		
	<!-- <bean id="loggerInterceptor" class="openrecordz.web.interceptor.LoggerInterceptor" />
	<bean id="handlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
    p:interceptors-ref="loggerInterceptor" /> -->
	 <mvc:interceptors>
<!-- 	     <bean class="openrecordz.web.interceptor.ClientLocationInterceptor" />
 -->	     <!-- set env var in jsp -->
		<bean class="openrecordz.web.interceptor.EnvironmentInterceptor" />
		<!-- <bean class="openrecordz.web.interceptor.CookiesDomainChangerInterceptor" /> -->
	   
	     <!-- <bean class="openrecordz.web.interceptor.TenantInterceptor" /> -->
	    <bean class="openrecordz.web.interceptor.TenantDomainAwareInterceptor" />
	    <bean class="openrecordz.web.interceptor.AuthenticationInterceptor" />
	    <!-- <bean class="openrecordz.web.interceptor.PostSocialSignInInterceptor" /> -->
	    <bean class="openrecordz.web.interceptor.CategoryInterceptor" />
	    <bean id="localeChangeInterceptor" class="openrecordz.web.interceptor.LocaleChangeInterceptorWithoutException">
	        <!-- https://jira.spring.io/browse/SPR-9456 --> 
	        <!-- class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"> -->
	   	 <property name="paramName" value="lang"/>
		</bean>
		
	   <bean class="openrecordz.web.interceptor.AuditingInterceptor" />
	    <bean class="openrecordz.web.interceptor.RequestThreadLocalInterceptor" />
	    <bean class="openrecordz.web.interceptor.ConfigThreadLocalInterceptor" />
	
	     
	    
	    
	    <!-- <mvc:exclude-mapping path="/admin/**"/> -->
	   <mvc:interceptor>
	       <!-- interviene solo sui service.. se metto a /** quindi anche per il web... ci sono problemi di cambio di utente correntemente loggato ...ad un certo punto diventa admin...non si capisce perche -->
        	<mvc:mapping path="/service/**"/>        	
        	<!-- <mvc:mapping path="/**"/> -->
         	<bean class="openrecordz.web.interceptor.ScriptingInterceptor" />
    	</mvc:interceptor> 
     
	    
	    
	    <bean class="openrecordz.web.interceptor.LoggerInterceptor" />
		<!-- spring 3.2 -->
		<!-- <mvc:interceptor>
		    <mvc:mapping path="/**"/>
		    <exclude-mapping path="/resource/**"/>
			<bean class="openrecordz.web.interceptor.AuditingInterceptor" />
		</mvc:interceptor> -->
		
		<!-- <bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
		    <property name="paramName" value="theme" />
		</bean> -->
	</mvc:interceptors> 

	<context:component-scan base-package="shoppino.web"/>
	
	
		<!-- the mvc resources tag does the magic -->
<!-- 	 <mvc:resources mapping="/resources/**" location="/resources/" /> -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />	
	<!-- robots.txt -->
	<mvc:resources mapping="/robots.txt" location="/resources/robots.txt" order="0"/>
	<!-- <mvc:resources mapping="/crossdomain.xml" location="/resources/crossdomain.xml" order="0"/> -->
	
	
	
	<!-- Configures the @Controller programming model -->
	<!-- JSR-303 support will be detected on classpath and enabled automatically -->
	<!-- <mvc:annotation-driven /> -->
	
	<mvc:annotation-driven>
	   
	   <!--provalo prima di passare in produzione..non testato ma potrebbe funzionare-->
	     <mvc:message-converters register-defaults="true">
		    <bean class="org.springframework.http.converter.StringHttpMessageConverter">
		      <property name="supportedMediaTypes" value = "text/plain;charset=UTF-8" />
		    </bean>
		  </mvc:message-converters>
		  
		  
  
	    	 <!-- http://stackoverflow.com/questions/7854030/configurating-objectmapper-in-spring -->	    
	 <!-- <mvc:message-converters register-defaults="false">
        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
            <property name="objectMapper">
                <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                    <property name="serializers">
                        <array>
                            <bean class="openrecordz.domain.serializer.ObjectIdSerializer"/>
                        </array>
                    </property>
                </bean>
            </property>
        </bean>
       </mvc:message-converters> -->
       
	</mvc:annotation-driven> 
	
	<!-- moved to configuration.xml-->
	 <!-- <bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="messages" />
		<property name="defaultEncoding" value="UTF-8"/>
	</bean> -->

	<!-- <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
	  <property name="definitions">
	    <list>
	      <value>/WEB-INF/defs/general.xml</value>
	      <value>/WEB-INF/defs/widgets.xml</value>
	      <value>/WEB-INF/defs/administrator.xml</value>
	      <value>/WEB-INF/defs/customer.xml</value>
	      <value>/WEB-INF/defs/templates.xml</value>
	    </list>
	  </property>
	</bean> -->
	
	
	<!-- EXCEPTION HANDLER -->
	<!-- http://www.stormpath.com/blog/spring-mvc-rest-exception-handling-best-practices-part-2 -->	
	<!-- Allow Exceptions to be handled in annotated methods if desired.  Otherwise fallback to the
         'restExceptionResolver' below: -->
    <bean id="annotationMethodHandlerExceptionResolver"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
        <property name="order" value="0"/>
    </bean>      
	
    <bean id="restExceptionResolver" class="openrecordz.web.rest.exception.handler.RestExceptionHandler">
        <property name="requestUriRegEx" value=".*/service/.*|.*/like.*|.*/unlike.*|.*shops/search.json.*|.*shops/add.ajax.*|.*shops/add.json.*"/>
        <property name="order" value="100"/>
      <!--   <property name="messageConverters">
            <list>
                <ref bean="jacksonHttpMessageConverter"/>
            </list>
        </property> -->
        <property name="errorResolver">
            <bean class="openrecordz.web.rest.exception.handler.DefaultRestErrorResolver">
               <!--  <property name="localeResolver" ref="localeResolver"/> -->
                <property name="defaultMoreInfoUrl" value="$shoppino-commons{shoppino.moreinfo.url}"/>
                <property name="exceptionMappingDefinitions">
                    <map>
                        <!-- 401 -->
                        <entry key="shoppino.security.exception.AuthenticationException" value="401, _exmsg"/>
                        
                        <!-- 403 -->
                        <entry key="org.springframework.security.access.AccessDeniedException" value="403, _exmsg"/>
                        <entry key="shoppino.security.exception.AuthorizationException" value="403, _exmsg"/>
                        <entry key="shoppino.scripting.JSAuthorizationException" value="403, _exmsg"/>
                        
                        
                        <!-- 404 -->
                        <!-- <entry key="shoppino.web.exception.UnknownResourceException" value="404, _exmsg"/> -->
                        <entry key="openrecordz.exception.ResourceNotFoundException" value="404, _exmsg"/>
                                               
                        <!-- 406 NOT_ACCEPTABLE  -->
                        <entry key="shoppino.web.exception.ValidationException" value="406, _exmsg"/>
                        
                        <!-- 409 conflict -->
                        <entry key="shoppino.security.exception.UsernameAlreadyInUseException" value="409, _exmsg"/>
                        
                         <!-- 410 -->
                        <entry key="openrecordz.exception.EmailAlreadyInUseException" value="410, _exmsg"/>
                        
                        <!-- 429 -->
                        <!-- https://en.wikipedia.org/wiki/List_of_HTTP_status_codes -->
                        <entry key="openrecordz.exception.TooManyNotificationException" value="429, _exmsg"/>
                        
                          <entry key="openrecordz.exception.TenantAlreadyInUseException" value="451 _exmsg"/>
                        
                        
                        <!-- 500 (catch all): -->
                        <entry key="Throwable" value="500"/>
                    </map>
                </property>
            </bean>
        </property>
    </bean>
	
      <!-- impostando order = 200 si ottiene la 3 priorità -->
	 <bean class="openrecordz.web.exception.resolver.LoggingExceptionResolver">
	    <property name="order" value="200"/>
	    <property name="defaultStatusCode" value="500"/>
		<property name="exceptionMappings">
			<props>
				<prop key="openrecordz.exception.ResourceNotFoundException">resource-notfound-exception</prop>
				<prop key="java.lang.Exception">error</prop>								
			</props>
		</property>
		<!-- https://jira.spring.io/browse/SPR-8759 -->
		<property name="statusCodes">
			<value>
		      resource-notfound-exception=404
		       <!-- error=500 -->
		       <!-- yet-another-view=500 -->
		   </value>
		</property>
	</bean> 
    
	
	 
	 
	<bean id="viewResolver"
	    class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <property name="viewClass">
	        <value>
	            org.springframework.web.servlet.view.tiles2.TilesView
	        </value>
	    </property>	    	  
	     <!-- <property name="contentType" value="application/json">
	     </property> -->
	</bean>
	<bean id="tilesConfigurer"
	    class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
	    <property name="definitions">
	        <list>
	            <value>/WEB-INF/tiles.xml</value>
	        </list>
	    </property>
	    <!-- http://stackoverflow.com/questions/8998018/apache-tiles-el-support-in-spring-3 -->
	    <!-- <property name="tilesProperties">
	        <props>
	            <prop key="org.apache.tiles.evaluator.AttributeEvaluator">
	                org.apache.tiles.el.ELAttributeEvaluator
	            </prop>
	        </props>
    	</property> -->
	</bean>
	
	<!-- <bean id="tilesViewResolver" class="org.springframework.js.ajax.AjaxUrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.js.ajax.tiles2.AjaxTilesView"/>
    </bean> -->
    

	<!-- <bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value="/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean> -->
	
	<bean id="multipartResolver"
	    class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	
	    <!-- one of the properties available; the maximum file size in bytes -->
	    <property name="maxUploadSize" value="10000000"/>
	</bean>
			
	
	
	<!-- http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-localeresolver -->
	<!-- http://www.mkyong.com/spring-mvc/spring-mvc-internationalization-example/ -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	    <property name="cookieName" value="clientlanguage"/>	    	   
	    <property name="cookieMaxAge" value="100000"/>
	</bean> 
	<!-- <bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>-->
	<!-- <bean id="localeChangeInterceptor"
	      class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	    <property name="paramName" value="siteLanguage"/>
	</bean> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" >
		<property name="interceptors">
		   <list>
			<ref bean="localeChangeInterceptor" />
		   </list>
		</property>
	</bean>   -->


	<!-- theme -->
	<!-- <bean id="themeSource"
	    class="org.springframework.ui.context.support.ResourceBundleThemeSource">
	        <property name="basenamePrefix" value="theme-" />
	</bean>
	 
	Theme Change Interceptor and Resolver definition	
	<bean id="themeResolver"
	    class="org.springframework.web.servlet.theme.CookieThemeResolver">
	    <property name="defaultThemeName" value="default" />
	</bean> -->
	 

    <!-- 
	<bean id="tenantFilter" class="openrecordz.web.filter.TenantFilter"/> -->
	
	<!-- <bean id="tenantSetterRequest" class="shoppino.service.impl.TenantSetterRequest"/> -->
	<!-- <import resource="classpath:/shoppino-shared-main-security-configuration.xml"/> -->
	
	
	
	<bean class="openrecordz.domain.validator.UserRegistrationValidation" />		
	<bean class="openrecordz.domain.validator.UserRegistrationServiceValidation" />
	<!-- <bean class="openrecordz.domain.validator.ChangePasswordValidation" /> -->
	<!-- <bean class="openrecordz.domain.validator.SettingsValidation" /> -->
	<bean class="openrecordz.domain.validator.PasswordForgotValidation" />
	
	
	
 	<!-- Configures Spring Social -->
<!--  	<bean class="shoppino.social.SocialConfig" >
 	</bean> -->
 	<!-- must be here not in configuration.xml -->
 	<!-- <bean id="socialService" class="shoppino.service.impl.SocialServiceImpl"/> -->
 	
 	
 	<!-- <context:annotation-config />
 	<lang:groovy id="testgroovy"
             refresh-check-delay="3000"
             script-source="/WEB-INF/groovy/TestController.groovy">
	</lang:groovy> -->
 
 	
</beans>